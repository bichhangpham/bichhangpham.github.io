[{"content":"Below are programs to summarise basics of C++ which I am learning in my Data Structures \u0026amp; Algorithms class.\nProgram 1: Namespace, printout /* Program 1: Namespace, printing out */ #include \u0026lt;iostream\u0026gt;using namespace std;  int main() {  int currentMillenium = 2000 ;   cout \u0026lt;\u0026lt; \u0026#34;The current millenium is: \u0026#34; \u0026lt;\u0026lt; currentMillenium \u0026lt;\u0026lt; endl;  return 0; } Note the return value refers to the programâ€™s exit code, which is 0 by default. Anything other than 0 means something is wrong with the program.\nProgram 2: Variable scope, type conversion Global variable declaration - declared before main function. All code after this can use the variable\nLocal variable declaration - created within a function. Only possible to use it within the function\n#include\u0026lt;iostream\u0026gt;using namespace std;  // Declaring a global variable int total_sum = 0;  // Auto-conversion of type int sum (double x, double y) {  total_sum = x + y;  return total_sum; } int main() {  double a = 2.5;  double b = 7.0;   cout \u0026lt;\u0026lt; sum(a, b) \u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt; \u0026#34;The value of total_sum is now: \u0026#34; \u0026lt;\u0026lt; total_sum \u0026lt;\u0026lt; endl; } Program 3: Public attributes Attributes which can be accessed directly, even outside of the class definition.\n#include \u0026lt;iostream\u0026gt;using namespace std;  class Box {  public:  double length;  double breadth;  double height; };  double getVolume(Box box) {  return box.length * box.breadth * box.height; }  int main() {  Box myBox;   myBox.length = 4;  myBox.breadth = 9;  myBox.height = 5;   cout \u0026lt;\u0026lt; \u0026#34;The volume for my box is: \u0026#34; \u0026lt;\u0026lt; getVolume(myBox) \u0026lt;\u0026lt; endl;  } Program 4: Private attributes Variables are declared as private.\nAttributes which cannot be accessed outside of the class, and must be done through the methods within this class\nConstructor is initialising the attributes.\nRecommended to define classes this way rather than using public attributes as outlined in the previous program.\n#include \u0026lt;iostream\u0026gt;using namespace std;  class Box {  private:  double length;  double breadth;  double height;  public:  Box(double l, double b, double h) {  length = l;  breadth = b;  height = h;   }  double getVolume() {  return length * breadth * height;  } };   int main() {  Box myBox(9, 5, 7);   cout \u0026lt;\u0026lt; \u0026#34;The volume for my box is: \u0026#34; \u0026lt;\u0026lt; myBox.getVolume() \u0026lt;\u0026lt; endl;  } Program 5: Constructor  Auto-created method when a class is created. When creating an object, the constructor will be called. Constructor/destructor has no return type. Arguments are allowed for constructors but not destructors. Multiple constructors can be defined  class Box { \tprivate: \tdouble length; \tdouble breadth; \tdouble height; \tpublic: \tBox() { \tlength = 2; \tbreadth = 2; \theight = 2; \t} \t\tBox(double l, double b, double h) { \tlength = l; \tbreadth = b; \theight = h;\t\t} } Program 6: Pointer Stores the memory address of a variable or object. Things to note:\n *ptr will return the value that is stored in the memory address that pointer is pointing to \u0026amp;ptr will return the memory location the pointer is pointing to  #include \u0026lt;iostream\u0026gt;using namespace std;  class Box {  private:  double length;  double breadth;  double height;  public:  Box(double l, double b, double h) {  length = l;  breadth = b;  height = h;   }  double getVolume() {  return length * breadth * height;  }  void printVolume() {  cout \u0026lt;\u0026lt; \u0026#34;Volume of box: \u0026#34; \u0026lt;\u0026lt; getVolume() \u0026lt;\u0026lt; endl;  } };   int main() {  // Calling the object\u0026#39;s method directly  Box myBox(9, 5, 7);  myBox.printVolume();   // Using a pointer to the class object  // Method is called using a pointer  // Pointer is then deleted after  Box * ptr = new Box(9, 5, 7);  ptr -\u0026gt; printVolume();  delete ptr;  }  Created the class object the new keyword will dynamically allocate memory. It will return a memory address to the newly created object. The class object has no name, but its memory space is allocated, which is then assigned to the pointer. Using â†’ will allow accessing attributes and methods We also need to ensure we delete the ptr to ensure memory space is freed up  ðŸ¤” If you want to create a linked list, you have to create a class object dynamically.\nProgram 7: Dereferencing a pointer In the previous program, we called the method using ptr -\u0026gt; printVolume();\nIn this example, we de-reference a pointer, and we are calling a method using the class object that was de-referenced by that pointer.\n#include \u0026lt;iostream\u0026gt;using namespace std;  class Box {  private:  double length;  double breadth;  double height;  public:  Box(double l, double b, double h) {  length = l;  breadth = b;  height = h;   }  double getVolume() {  return length * breadth * height;  }  void printVolume() {  cout \u0026lt;\u0026lt; \u0026#34;Volume of box: \u0026#34; \u0026lt;\u0026lt; getVolume() \u0026lt;\u0026lt; endl;  } };   int main() {   Box * ptr = new Box(9, 5, 7);  (*ptr).printVolume();  delete ptr;  }  calling method using ptr:\n   ptr -\u0026gt; printVolume(); calling method after ptr has been deferenced:     (*ptr).printVolume();   Program 8: Pointer to simple data types Create a pointer to point to a simple data type (double)\n#include \u0026lt;iostream\u0026gt;using namespace std;  int main() {  // Initialise pointer with null  int * intPtr = nullptr;  // int * intPtr = NULL;  // Allocate memory space to ptr  intPtr = new int;  // Store value in allocated address  * intPtr = 2000;  // Prints value  cout \u0026lt;\u0026lt; *intPtr + 1000 \u0026lt;\u0026lt; endl;  //Remove pointer  delete intPtr; } Program 9: Reference Normally not used, but used when passing parameters so that original object/variable is also modified\n#include \u0026lt;iostream\u0026gt; using namespace std;  int add_length(int\u0026amp; x, int \u0026amp;y) {  x = x + 10;  return x + y; }  int main() {  int x = 10;  int y = 10;   cout \u0026lt;\u0026lt; \u0026#34;Adding x and y = \u0026#34; \u0026lt;\u0026lt; x + y \u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt; \u0026#34;Adding using add_length function = \u0026#34; \u0026lt;\u0026lt; add_length(x, y) \u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt; \u0026#34;Adding x and y again = \u0026#34; \u0026lt;\u0026lt; x + y \u0026lt;\u0026lt; endl; } Result of the above code:\nAdding x and y = 20 Adding using add_length function = 30 Adding x and y again = 30 Program 10: Without using a reference The example below is the same as program 10, except the \u0026amp; value is not used in the arguments for the add_length function.\nThe original memory address and value is not modified.\n#include \u0026lt;iostream\u0026gt; using namespace std; //Removing the ampersand int add_length(int x, int y) {  x = x + 10;  return x + y; }  int main() {  int x = 10;  int y = 10;   cout \u0026lt;\u0026lt; \u0026#34;Adding x and y = \u0026#34; \u0026lt;\u0026lt; x + y \u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt; \u0026#34;Adding using add_length function = \u0026#34; \u0026lt;\u0026lt; add_length(x, y) \u0026lt;\u0026lt; endl;  cout \u0026lt;\u0026lt; \u0026#34;Adding x and y again = \u0026#34; \u0026lt;\u0026lt; x + y \u0026lt;\u0026lt; endl; } The result should be:\nAdding x and y = 20 Adding using add_length function = 30 Adding x and y again = 20 ","permalink":"https://bichhangpham.github.io/posts/university/intro-to-cpp/","summary":"Below are programs to summarise basics of C++ which I am learning in my Data Structures \u0026amp; Algorithms class.\nProgram 1: Namespace, printout /* Program 1: Namespace, printing out */ #include \u0026lt;iostream\u0026gt;using namespace std;  int main() {  int currentMillenium = 2000 ;   cout \u0026lt;\u0026lt; \u0026#34;The current millenium is: \u0026#34; \u0026lt;\u0026lt; currentMillenium \u0026lt;\u0026lt; endl;  return 0; } Note the return value refers to the programâ€™s exit code, which is 0 by default.","title":"Intro to Cpp"},{"content":"","permalink":"https://bichhangpham.github.io/about/","summary":"","title":"About"}]